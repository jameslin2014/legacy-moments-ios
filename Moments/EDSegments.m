//
//  EDSegments.m
//  Moments
//
//  Created by Evan Dekhayser on 12/19/14.
//  Copyright (c) 2014 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "EDSegments.h"


@implementation EDSegments

#pragma mark Cache

static UIColor* _color = nil;
static UIColor* _color2 = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _color = [UIColor colorWithRed: 0.941 green: 0.941 blue: 0.941 alpha: 0.608];
    _color2 = [UIColor colorWithRed: 0.588 green: 0.588 blue: 0.588 alpha: 0.608];

}

#pragma mark Colors

+ (UIColor*)color { return _color; }
+ (UIColor*)color2 { return _color2; }

#pragma mark Drawing Methods

+ (void)drawCanvas1
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Group
    {
        //// Rectangle Drawing
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 180, 70) byRoundingCorners: UIRectCornerTopLeft | UIRectCornerBottomLeft cornerRadii: CGSizeMake(35, 35)];
        [rectanglePath closePath];
        [EDSegments.color setFill];
        [rectanglePath fill];


        //// Rectangle 2 Drawing
        UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(181, 1, 179, 68) byRoundingCorners: UIRectCornerTopRight | UIRectCornerBottomRight cornerRadii: CGSizeMake(34, 34)];
        [rectangle2Path closePath];
        [EDSegments.color setStroke];
        rectangle2Path.lineWidth = 2;
        [rectangle2Path stroke];


        //// Text Drawing
        CGRect textRect = CGRectMake(0, 1, 181, 68);
        {
            NSString* textContent = @"Options";
            NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            textStyle.alignment = NSTextAlignmentCenter;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 27], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }


        //// Text 2 Drawing
        CGRect text2Rect = CGRectMake(181, 1, 179, 68);
        {
            NSString* textContent = @"About";
            NSMutableParagraphStyle* text2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            text2Style.alignment = NSTextAlignmentCenter;

            NSDictionary* text2FontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 27], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: text2Style};

            CGFloat text2TextHeight = [textContent boundingRectWithSize: CGSizeMake(text2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text2FontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, text2Rect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(text2Rect), CGRectGetMinY(text2Rect) + (CGRectGetHeight(text2Rect) - text2TextHeight) / 2, CGRectGetWidth(text2Rect), text2TextHeight) withAttributes: text2FontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawCanvas2
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Group 2
    {
        //// Rectangle 3 Drawing
        UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 1, 180, 68) byRoundingCorners: UIRectCornerTopLeft | UIRectCornerBottomLeft cornerRadii: CGSizeMake(34, 34)];
        [rectangle3Path closePath];
        [EDSegments.color setStroke];
        rectangle3Path.lineWidth = 2;
        [rectangle3Path stroke];


        //// Rectangle 4 Drawing
        UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(181, 0, 179, 70) byRoundingCorners: UIRectCornerTopRight | UIRectCornerBottomRight cornerRadii: CGSizeMake(35, 35)];
        [rectangle4Path closePath];
        [EDSegments.color setFill];
        [rectangle4Path fill];


        //// Text 3 Drawing
        CGRect text3Rect = CGRectMake(0, 1, 181, 68);
        {
            NSString* textContent = @"Options";
            NSMutableParagraphStyle* text3Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            text3Style.alignment = NSTextAlignmentCenter;

            NSDictionary* text3FontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 27], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: text3Style};

            CGFloat text3TextHeight = [textContent boundingRectWithSize: CGSizeMake(text3Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text3FontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, text3Rect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(text3Rect), CGRectGetMinY(text3Rect) + (CGRectGetHeight(text3Rect) - text3TextHeight) / 2, CGRectGetWidth(text3Rect), text3TextHeight) withAttributes: text3FontAttributes];
            CGContextRestoreGState(context);
        }


        //// Text 4 Drawing
        CGRect text4Rect = CGRectMake(181, 1, 179, 68);
        {
            NSString* textContent = @"About";
            NSMutableParagraphStyle* text4Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            text4Style.alignment = NSTextAlignmentCenter;

            NSDictionary* text4FontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 27], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: text4Style};

            CGFloat text4TextHeight = [textContent boundingRectWithSize: CGSizeMake(text4Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text4FontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, text4Rect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(text4Rect), CGRectGetMinY(text4Rect) + (CGRectGetHeight(text4Rect) - text4TextHeight) / 2, CGRectGetWidth(text4Rect), text4TextHeight) withAttributes: text4FontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawCanvas3
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Group
    {
        //// Rectangle Drawing
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 1, 179, 68) byRoundingCorners: UIRectCornerTopLeft | UIRectCornerBottomLeft cornerRadii: CGSizeMake(34, 34)];
        [rectanglePath closePath];
        [EDSegments.color2 setStroke];
        rectanglePath.lineWidth = 2;
        [rectanglePath stroke];


        //// Rectangle 2 Drawing
        UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(181, 1, 179, 68) byRoundingCorners: UIRectCornerTopRight | UIRectCornerBottomRight cornerRadii: CGSizeMake(34, 34)];
        [rectangle2Path closePath];
        [EDSegments.color setStroke];
        rectangle2Path.lineWidth = 2;
        [rectangle2Path stroke];


        //// Text Drawing
        CGRect textRect = CGRectMake(0, 1, 181, 68);
        {
            NSString* textContent = @"Options";
            NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            textStyle.alignment = NSTextAlignmentCenter;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 27], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }


        //// Text 2 Drawing
        CGRect text2Rect = CGRectMake(181, 1, 179, 68);
        {
            NSString* textContent = @"About";
            NSMutableParagraphStyle* text2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            text2Style.alignment = NSTextAlignmentCenter;

            NSDictionary* text2FontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 27], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: text2Style};

            CGFloat text2TextHeight = [textContent boundingRectWithSize: CGSizeMake(text2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text2FontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, text2Rect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(text2Rect), CGRectGetMinY(text2Rect) + (CGRectGetHeight(text2Rect) - text2TextHeight) / 2, CGRectGetWidth(text2Rect), text2TextHeight) withAttributes: text2FontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawCanvas4
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Group
    {
        //// Rectangle Drawing
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 1, 179, 68) byRoundingCorners: UIRectCornerTopLeft | UIRectCornerBottomLeft cornerRadii: CGSizeMake(34, 34)];
        [rectanglePath closePath];
        [EDSegments.color setStroke];
        rectanglePath.lineWidth = 2;
        [rectanglePath stroke];


        //// Rectangle 2 Drawing
        UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(181, 1, 179, 68) byRoundingCorners: UIRectCornerTopRight | UIRectCornerBottomRight cornerRadii: CGSizeMake(34, 34)];
        [rectangle2Path closePath];
        [EDSegments.color2 setStroke];
        rectangle2Path.lineWidth = 2;
        [rectangle2Path stroke];


        //// Text Drawing
        CGRect textRect = CGRectMake(0, 1, 181, 68);
        {
            NSString* textContent = @"Options";
            NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            textStyle.alignment = NSTextAlignmentCenter;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 27], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }


        //// Text 2 Drawing
        CGRect text2Rect = CGRectMake(181, 1, 179, 68);
        {
            NSString* textContent = @"About";
            NSMutableParagraphStyle* text2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            text2Style.alignment = NSTextAlignmentCenter;

            NSDictionary* text2FontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 27], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: text2Style};

            CGFloat text2TextHeight = [textContent boundingRectWithSize: CGSizeMake(text2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text2FontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, text2Rect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(text2Rect), CGRectGetMinY(text2Rect) + (CGRectGetHeight(text2Rect) - text2TextHeight) / 2, CGRectGetWidth(text2Rect), text2TextHeight) withAttributes: text2FontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

@end
